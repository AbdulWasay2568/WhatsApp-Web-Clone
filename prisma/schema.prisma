datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  messages         Message[]  @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  reactions        Reaction[]
  replies          Reply[]
  replyReactions   ReplyReaction[]

  callsMade     Call[] @relation("CallsMade")
  callsReceived Call[] @relation("CallsReceived")

  // ðŸ†• Contacts system (self-referencing many-to-many)
  contactsA Contact[] @relation("ContactA")
  contactsB Contact[] @relation("ContactB")
}

model Contact {
  id        Int      @id @default(autoincrement())
  userA     User     @relation("ContactA", fields: [userAId], references: [id])
  userAId   Int
  userB     User     @relation("ContactB", fields: [userBId], references: [id])
  userBId   Int
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model Message {
  id         Int    @id @default(autoincrement())
  content    String
  sender     User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int

  read      Boolean       @default(false)
  status    MessageStatus @default(Sent)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  reactions Reaction[]
  replies   Reply[]

  fileUrl   String?
  imageUrl  String?
}

enum MessageStatus {
  Sent
  Delivered
  Read
}

model Reaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   Message  @relation(fields: [messageId], references: [id])
  messageId Int
  createdAt DateTime @default(now())
}

model Reply {
  id                Int      @id @default(autoincrement())
  content           String
  sender            User     @relation(fields: [senderId], references: [id])
  senderId          Int
  originalMessage   Message  @relation(fields: [originalMessageId], references: [id])
  originalMessageId Int

  read      Boolean       @default(false)
  status    MessageStatus @default(Sent)

  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt

  fileUrl           String?
  imageUrl          String?

  reactions         ReplyReaction[]
}

model ReplyReaction {
  id        Int      @id @default(autoincrement())
  emoji     String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  reply     Reply    @relation(fields: [replyId], references: [id])
  replyId   Int
  createdAt DateTime @default(now())
}

model Call {
  id        Int        @id @default(autoincrement())
  callerId  Int
  calleeId  Int
  status    CallStatus
  startedAt DateTime?
  endedAt   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  caller User @relation("CallsMade", fields: [callerId], references: [id])
  callee User @relation("CallsReceived", fields: [calleeId], references: [id])
}

enum CallStatus {
  Ringing
  Accepted
  Rejected
  Missed
  Ended
}
